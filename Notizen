//jaccard:
mit einem char *über die strings iterieren, bei fund eines wortes die char *zu short oder int casten und die dem zugrunde liegenden n byte als nummer in liste speichern, anschließend nurnoch die nummern verarbeiten für schnitt und union

    /*int operator == (const laptop& other) const
    {
        //0 == nomatch
        //1 == ismatch
        //2 == use fallback if wanted
        const void *jumptable[] = {&&compFalse, &&compTrue};
        const void *jumptableTRUE[] =
            {
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&foundIdentical,
                &&foundIdentical,
                &&foundIdentical,
                &&foundIdentical,
                &&foundIdentical,
                &&foundIdentical};

        const void *jumptableUNKNOWN[] =
        {
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&checkComp,
                &&useFallBack,
                &&useFallBack};

        const void *jumptableCATEGORY_CHECK[] =
        {
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&Comp,
                &&useFallBack
        };
        char c = assembler_brand; // Start with first category
        char equal = 0;
        char different = 0;
        const char required = 0;

    checkComp:
        // Check if we've gone beyond the valid categories
        goto *jumptableCATEGORY_CHECK[c];
    Comp:
        if (!(*this)[c] || !other[c])
        {
            // DEBUG_MATCH("Category %d (%s) not comparable (values: %hu, %hu)\n", c, category_name(c), (*this)[c], other[c]);
            goto notComparable;
        }

        goto *jumptable[(*this)[c] == other[c]]; // returns 0 or 1, 0 should be false, 1 should be true

    compTrue:
        ++equal;
        ++c;

        // Check for out-of-bounds jump in jumptableRET
        goto *jumptableTRUE[equal];

    compFalse:
        return 0; // 0 == not identical, found information discarding equality

    notComparable:
        ++c;

        // prevent going out of bounds, by limiting where to jump to
        goto *jumptableUNKNOWN[c];

    useFallBack:
        if (equal > required) // if we found enough to suspect a match, look again with a different method
        {
            return 2;
        }
        return 0; // otherwise dont waste time looking

    foundIdentical:
        //this->print();
        //printf(" == ");
        //other.println();
        return 1;
    }

    double operator|(laptop &other)
    {
        //make sure, that before using this, we link the numeral_buf to a uint32_t[<size>] with size being big enough to hold approx 200 maybe more in the worst case.
        //have one buffer for each object we compare (so in each thread we need 2 in total)

        auto processString = [&](char *str, laptop* obj)
        {
            char *p = str;
            int tokenValue = 0;

            const void *jumpTableLoop[256] =
            {
                &&eol, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,             // 0–7
                &&stn, &&stn, &&eol, &&stn, &&stn, &&stn, &&stn, &&stn,             // 8–15
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 16–23
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, // 24–31
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 32–39
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 40–47
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 48–55
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 56–63
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 64–71
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 72–79
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 80–87
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 88–95
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 96–103
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 104–111
                &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn, &&stn,            // 112–119
                &&stn, &&stn, &&stn, &&stn, &&loop_whitespace, &&stn, &&stn, &&stn, // 120–127
            };

            const void *jumpTableFound8[256] =
            {
                &&sChar, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 0–7
                &&gt1char, &&gt1char, &&sChar, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 8–15
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 16–23
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 24–31
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 32–39
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 40–47
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 48–55
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 56–63
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 64–71
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 72–79
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 80–87
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 88–95
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 96–103
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 104–111
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&gt1char,             // 112–119
                &&gt1char, &&gt1char, &&gt1char, &&gt1char, &&sChar, &&gt1char, &&gt1char, &&gt1char, // 120–127
            };

            const void *jumpTableFound16[256] =
            {
                &&sShort, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 0–7
                &&ge2char, &&ge2char, &&sShort, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 8–15
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 16–23
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 24–31
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 32–39
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 40–47
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 48–55
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 56–63
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 64–71
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 72–79
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 80–87
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 88–95
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 96–103
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 104–111
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&ge2char,             // 112–119
                &&ge2char, &&ge2char, &&ge2char, &&ge2char, &&sShort, &&ge2char, &&ge2char, &&ge2char, // 120–127
            };

            const void *jumpTableFound24[256] =
            {
                    &&ssShort, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 0–7
                    &&sIntL, &&sIntL, &&ssShort, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 8–15
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 16–23
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 24–31
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 32–39
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 40–47
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 48–55
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 56–63
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 64–71
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 72–79
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 80–87
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 88–95
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 96–103
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 104–111
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 112–119
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&ssShort, &&sIntL, &&sIntL, &&sIntL, // 120–127
            };

            const void *jumpTableIntLoop[256] =
                {
                    &&eol, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 0–7
                    &&sIntL, &&sIntL, &&eol, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,             // 8–15
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 16–23
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 24–31
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 32–39
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 40–47
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 48–55
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 56–63
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 64–71
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 72–79
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 80–87
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 88–95
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 96–103
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 104–111
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&sIntL,           // 112–119
                    &&sIntL, &&sIntL, &&sIntL, &&sIntL, &&loop_whitespace, &&sIntL, &&sIntL, &&sIntL, // 120–127
                };

            goto *jumpTableLoop[*p];
            uint32_t numeral;
                //_|_|_|c-c-c-c ... |

            stn :
                // save current destination
                char *pos = p;
                char roffset = 0;
                goto *jumpTableFound8[*(++p)]; // if the next char after dest is a whitespace, jump to save char, to only save one char in a number
            gt1char: //otherwise we will land here
                goto *jumpTableFound16[*(++p)]; //if the 2nd byte after dst is a whitespace, jump to sShort for we got at least 2 letters we will take as 1 int with 16bit offset
            ge2char: //otherwise we will land here
                goto *jumpTableFound24[*(++p)]; //if the 3rd byte after dst is a whitespace, jump to ssShort for we got 3 letters we will take as 1 int with 8 bit offset
            sIntL: //otherwise we got 4 or more letters in a row, therefor we loop_saveInt
                numeral = *((uint32_t*)pos); //get numeral at pos and increment pos for next possible step to be in a different position
                pos++;
                obj->numeral_buffer[obj->numNumerals] = numeral; //save numeral to buffer
                obj->numNumerals++; //increment number of numerals for correct saving location and later work
                goto *jumpTableIntLoop[*(++p)]; //if the next byte is also not a whitespace, will land back here, otherwise will loop whitespace

            sChar:
                roffset = 24; //have a 24 offset ready for shift, and jump to save as integer;
                goto sInt;
            sShort: //save 2 byte in an integer by offsetting the current data >> 16
                roffset = 16;
                goto sInt;
            ssShort: //save 3 byte in an int by offsetting the current data >> 8
                roffset = 8;
                goto sInt;
            sInt:
                numeral = *((uint32_t*)pos);
                uint32_t onumeral = numeral >> roffset; //get data at destination for exactly the filed bytes we need
                obj->numeral_buffer[obj->numNumerals] = (uint32_t)onumeral;  //save the shifted numeral
                obj->numNumerals++;// increase for correct save location
                goto *jumpTableLoop[*p];

            loop_whitespace:
                ++p;
                goto *jumpTableLoop[*p];

            eol:
                return;
        };

        //our tokens are now in this->numeral_buffer and other. numeral buffer
        //count the tokens we got all together, by merging the lists without duplicates;
        //count the tokens we got in common in both lists, without duplicates;
        //divide : (number of common tokens) by (number of all distinct tokens)

        this->numNumerals = 0;
        other.numNumerals = 0;

        processString(reinterpret_cast<char*>(this->descriptor->data[0]),this);
        processString(reinterpret_cast<char*>(other.descriptor->data[0]),&other);

        std::unordered_set<uint32_t> numeralSet1(this->numeral_buffer, this->numeral_buffer+this->numNumerals);
        std::unordered_set<uint32_t> numeralSet2(other.numeral_buffer, other.numeral_buffer + other.numNumerals);

        //get intersection
        std::unordered_set<uint32_t> intersection;
        for (const auto &num : numeralSet1)
        {
            if (numeralSet2.find(num) != numeralSet2.end())
            {
                intersection.insert(num);
            }
        }

        std::unordered_set<uint32_t> unionSet = numeralSet1; // Kopiere mySet1
        unionSet.insert(numeralSet2.begin(), numeralSet2.end());

        size_t intersection_count = intersection.size();
        size_t union_count = unionSet.size();
        double jaccard_index = union_count > 0 ? static_cast<double>(intersection_count) / union_count : 0.0;
        return jaccard_index;
    }*/